{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sharpner\\\\reactjs-hrs\\\\project-hrs\\\\src\\\\components\\\\Context\\\\Context.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/React.createContext({\n  items: [],\n  addItems: item => {}\n});\nconst defaultCartState = {\n  items: []\n};\nconst cartReducer = (state, action) => {\n  if (action.type === \"add\") {\n    let updatedItems;\n    updatedItems = [...state.items, {\n      id: action.item.id,\n      name: action.item.name,\n      description: action.item.price,\n      quantity: 1\n    }];\n    return {\n      items: updatedItems\n    };\n  }\n};\nexport const ContextProvider = props => {\n  _s();\n  const [cartState, dispenseCartAction] = useReducer(cartReducer, defaultCartState);\n  useEffect(async () => {\n    try {\n      const response = await fetch(\"https://crudcrud.com/api/f6786d8be8944cc08cd00c7ff96c70a1/cartitems\");\n      if (response.ok) {\n        let data = response.json();\n        console.log(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  const addItemHandler = med => {\n    dispenseCartAction({\n      type: \"add\",\n      item: med\n    });\n  };\n  const meds = {\n    items: cartState.items,\n    addItems: addItemHandler\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: meds,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n};\n_s(ContextProvider, \"aP05EHWA6DapnhZeLKY9IiPHdIs=\");\n_c = ContextProvider;\nexport default Context;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","useEffect","useReducer","jsxDEV","_jsxDEV","Context","createContext","items","addItems","item","defaultCartState","cartReducer","state","action","type","updatedItems","id","name","description","price","quantity","ContextProvider","props","_s","cartState","dispenseCartAction","response","fetch","ok","data","json","console","log","error","addItemHandler","med","meds","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Sharpner/reactjs-hrs/project-hrs/src/components/Context/Context.js"],"sourcesContent":["import React, { useEffect, useReducer } from \"react\";\r\nconst Context = React.createContext({ items: [], addItems: (item) => {} });\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n};\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"add\") {\r\n    let updatedItems;\r\n    updatedItems = [\r\n      ...state.items,\r\n      {\r\n        id: action.item.id,\r\n        name: action.item.name,\r\n        description: action.item.price,\r\n        quantity: 1,\r\n      },\r\n    ];\r\n\r\n    return {\r\n      items: updatedItems,\r\n    };\r\n  }\r\n};\r\nexport const ContextProvider = (props) => {\r\n  const [cartState, dispenseCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n  useEffect(async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://crudcrud.com/api/f6786d8be8944cc08cd00c7ff96c70a1/cartitems\"\r\n      );\r\n      if (response.ok) {\r\n        let data = response.json();\r\n        console.log(data);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  });\r\n  const addItemHandler = (med) => {\r\n    dispenseCartAction({ type: \"add\", item: med });\r\n  };\r\n  const meds = {\r\n    items: cartState.items,\r\n    addItems: addItemHandler,\r\n  };\r\n  return <Context.Provider value={meds}>{props.children}</Context.Provider>;\r\n};\r\n\r\nexport default Context;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACrD,MAAMC,OAAO,gBAAGL,KAAK,CAACM,aAAa,CAAC;EAAEC,KAAK,EAAE,EAAE;EAAEC,QAAQ,EAAGC,IAAI,IAAK,CAAC;AAAE,CAAC,CAAC;AAE1E,MAAMC,gBAAgB,GAAG;EACvBH,KAAK,EAAE;AACT,CAAC;AACD,MAAMI,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,IAAIA,MAAM,CAACC,IAAI,KAAK,KAAK,EAAE;IACzB,IAAIC,YAAY;IAChBA,YAAY,GAAG,CACb,GAAGH,KAAK,CAACL,KAAK,EACd;MACES,EAAE,EAAEH,MAAM,CAACJ,IAAI,CAACO,EAAE;MAClBC,IAAI,EAAEJ,MAAM,CAACJ,IAAI,CAACQ,IAAI;MACtBC,WAAW,EAAEL,MAAM,CAACJ,IAAI,CAACU,KAAK;MAC9BC,QAAQ,EAAE;IACZ,CAAC,CACF;IAED,OAAO;MACLb,KAAK,EAAEQ;IACT,CAAC;EACH;AACF,CAAC;AACD,OAAO,MAAMM,eAAe,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,SAAS,EAAEC,kBAAkB,CAAC,GAAGvB,UAAU,CAChDS,WAAW,EACXD,gBACF,CAAC;EACDT,SAAS,CAAC,YAAY;IACpB,IAAI;MACF,MAAMyB,QAAQ,GAAG,MAAMC,KAAK,CAC1B,qEACF,CAAC;MACD,IAAID,QAAQ,CAACE,EAAE,EAAE;QACf,IAAIC,IAAI,GAAGH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAC1BC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACnB;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB;EACF,CAAC,CAAC;EACF,MAAMC,cAAc,GAAIC,GAAG,IAAK;IAC9BV,kBAAkB,CAAC;MAAEX,IAAI,EAAE,KAAK;MAAEL,IAAI,EAAE0B;IAAI,CAAC,CAAC;EAChD,CAAC;EACD,MAAMC,IAAI,GAAG;IACX7B,KAAK,EAAEiB,SAAS,CAACjB,KAAK;IACtBC,QAAQ,EAAE0B;EACZ,CAAC;EACD,oBAAO9B,OAAA,CAACC,OAAO,CAACgC,QAAQ;IAACC,KAAK,EAAEF,IAAK;IAAAG,QAAA,EAAEjB,KAAK,CAACiB;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAmB,CAAC;AAC3E,CAAC;AAACpB,EAAA,CA1BWF,eAAe;AAAAuB,EAAA,GAAfvB,eAAe;AA4B5B,eAAehB,OAAO;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}